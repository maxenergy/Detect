需求与功能分析：
	1.给定值为经过初步过滤后的可疑轮廓集合。
	2.能够对每一个轮廓计算一个标识（暂定为闭合轮廓中心点）
	3.定义标识匹配的规则（暂定为中心点距离）
	4.根据不同的匹配情况，进行状态更新：
		① 1→1：增加到队列尾
		② n→1：全部增加到队尾
		③ 0→1：在队尾增加一个空对象
		④ 1→n：添加到最近的队列中
		⑤ 1→0：增加一个新队列
	5.根据给定的计算规则，计算队列的特征值。
	6.能够返回指定队列。

类的设计：

//元素类
class element
{
	属性：
		时间标识
		轮廓
		指向上一元素的指针
}；

//元素的队列类
class qofc
{
	属性：
		指向队首的指针
		指向队尾的指针
	方法：
		push_back；	//在队尾压入一个元素
		pop；		//队首弹出一个元素
		insert；	//按顺序插入一个元素
		insert；	//重载，插入另一个队列
		numofe；	//返回有效元素个数
		isempty；	//返回队列是否为空
}；

//特征管理类
class feature
{
	属性：
		特征名
		特征值集合
		特征计算函数指针
	方法：
		feature；		//初始化函数
		updatedata；	//更新特征集合
}；

//时序管理类（按时序对队列的集合进行管理）：
class temporaldatam
{
	属性：
		队列的无序集合
	方法：
		addq；		//增加一个队列
		deleteq；	//删除指定队列
		push_back；	//在所有队尾压入一个序列
		pop；		//在所有队首弹出一个序列
		mergeq；	//融合两个队列
		isnear；	//判断两个队列的标识是否足够近，如果足够近则融合

		culkeyofc；	//计算一个闭合轮廓的标识
		inputdata；	//对输入的可疑轮廓集合中的每一个元素进行操作规划
		update；	//输入可疑轮廓，更新状态
		culfeature；//利用给定的可操作对象，对每一个队列进行特征计算。
}；



